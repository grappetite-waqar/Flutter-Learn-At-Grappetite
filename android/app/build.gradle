plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    // END: FlutterFire Configuration
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

// keystore
def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('./app/key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else {
    throw new GradleException('key.properties file not found in android/app')
}

// Environment
def dartDefines = [
        DART_ENV: 'staging',
]
if (project.hasProperty('dart-defines')) {
    dartDefines = dartDefines + project.property('dart-defines')
            .split(',')
            .collectEntries { entry ->
                def pair = new String(entry.decodeBase64(), 'UTF-8').split('=')
                [(pair.first()): pair.last()]
            }
}

def dartEnvProperties = new Properties()
def dartEnvPropertiesFile = rootProject.file('../config/' + dartDefines.DART_ENV + '.config')
if (dartEnvPropertiesFile.exists()) {
    dartEnvProperties.load(new FileInputStream(dartEnvPropertiesFile))
} else {
    throw new GradleException(dartDefines.DART_ENV + '.config file not found for in flutter config/ directory')
}

android {
    namespace = "com.grappetite.learnatgrap"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId = "com.grappetite.learnatgrap"
        minSdk = flutter.minSdkVersion
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
        resValue "string", "app_name", dartEnvProperties['APP_NAME']
    }

    signingConfigs {
        release {
            storeFile file('./keystore.jks')
            storePassword keystoreProperties['password']
            keyAlias 'learnatgrap'
            keyPassword keystoreProperties['password']
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.release
        }
        profile {
            signingConfig signingConfigs.release
        }
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

flutter {
    source = "../.."
}
